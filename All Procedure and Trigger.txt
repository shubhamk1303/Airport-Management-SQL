--Procedures
--1.Passenger Travelling to Delhi in Economy with Error if Economy but no Ticket number

CREATE OR REPLACE PROCEDURE DELECONOMYPASSENGERS AS 
  CURSOR ECOPASSDETAILS IS
    SELECT al.AL_NAME, fl.FLIGHT_CODE, p2.FNAME, p2.LNAME, p2.PASSPORTNO, t.CLASS, t.DATE_OF_TRAVEL, t.DESTINATION, t.SOURCE, t.SEATNO, t.TICKET_NUMBER
    FROM Airline al, Flight fl, PASSENGER1 p1, PASSENGER2 p2, PASSENGER3 p3, TICKET1 t
    WHERE al.AIRLINEID = fl.AIRLINEID
      AND p1.PID = p3.PID
      AND p1.PASSPORTNO = p2.PASSPORTNO
      AND fl.FLIGHT_CODE = p3.FLIGHT_CODE
      AND t.PASSPORTNO = p2.PASSPORTNO
      AND t.CLASS = 'ECONOMY' AND t.DESTINATION = 'DEL';
 
  PASSDETAILS ECOPASSDETAILS%ROWTYPE;
 
BEGIN
  OPEN ECOPASSDETAILS;
  LOOP
    BEGIN
      FETCH ECOPASSDETAILS INTO PASSDETAILS;
      EXIT WHEN ECOPASSDETAILS%NOTFOUND;
      DBMS_OUTPUT.PUT_LINE(PASSDETAILS.AL_NAME || '  ' || PASSDETAILS.FLIGHT_CODE || '  ' || PASSDETAILS.FNAME || '  ' || PASSDETAILS.LNAME || '  ' || PASSDETAILS.PASSPORTNO || '  ' || PASSDETAILS.CLASS || '  ' || PASSDETAILS.SOURCE || '  ' || PASSDETAILS.SEATNO || '  ' || PASSDETAILS.TICKET_NUMBER);
      
     

      IF PASSDETAILS.CLASS = 'ECONOMY' AND PASSDETAILS.TICKET_NUMBER IS NULL THEN
        RAISE_APPLICATION_ERROR(-20001, 'Invalid data detected');
      END IF;
      
    EXCEPTION
      WHEN OTHERS THEN
        -- Handle the exception
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
    END;
  END LOOP;
  CLOSE ECOPASSDETAILS;
EXCEPTION
  WHEN OTHERS THEN
    -- Handle the exception
    DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END DELECONOMYPASSENGERS;
/

--2.Flight Status Delayed or On-time

CREATE OR REPLACE PROCEDURE FLIGHTSBYSTATUS 
(
  IN_STATUS IN VARCHAR2
) AS 
 
CURSOR fSTATUS IS
  SELECT DISTINCT f.FLIGHT_CODE, al.AL_NAME, f.ARRIVAL, f.departure, f.SOURCE, f.DESTINATION, f.STATUS, f.FLIGHTTYPE
  FROM Airline al, Airport ap, flight f
  WHERE al.AIRLINEID = f.AIRLINEID
    AND f.STATUS = IN_STATUS;
 
FlightStatus fSTATUS%ROWTYPE;
  
BEGIN
  OPEN fSTATUS;
  LOOP
    FETCH fSTATUS INTO FlightStatus;
    EXIT WHEN fSTATUS%NOTFOUND;
    
    -- Check for invalid data and raise exception if necessary
    IF FlightStatus.FLIGHT_CODE IS NULL THEN
      RAISE_APPLICATION_ERROR(-20001, 'Invalid data: FLIGHT_CODE is NULL');
    END IF;
    
    IF FlightStatus.AL_NAME IS NULL THEN
      RAISE_APPLICATION_ERROR(-20002, 'Invalid data: AL_NAME is NULL');
    END IF;
    
    -- Print the flight details if no exception is raised
    DBMS_OUTPUT.PUT_LINE(FlightStatus.FLIGHT_CODE || '  ' || FlightStatus.AL_NAME || '  ' || FlightStatus.ARRIVAL || '  ' || FlightStatus.departure || '  ' || FlightStatus.Source || '  ' || FlightStatus.DESTINATION || '  ' || FlightStatus.STATUS || '  ' || FlightStatus.FLIGHTTYPE);
    
  END LOOP;
  CLOSE fSTATUS;
  
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
    -- Handle the exception as per your requirement
    
END FLIGHTSBYSTATUS;
/

--3.On Input of Airline code AA,QR etc will display the airport which it operates

CREATE OR REPLACE PROCEDURE GetAirportsByAirline
(
  IN_AIRLINEID IN VARCHAR2,
  OUT_AIRPORTS OUT SYS_REFCURSOR
) AS
BEGIN
  OPEN OUT_AIRPORTS FOR
    SELECT AP_NAME
    FROM CONTAINS
    WHERE AIRLINEID = IN_AIRLINEID;
END;
/

--TO CALL 
DECLARE
  airlineAirports SYS_REFCURSOR;
  airportName VARCHAR2(100);
BEGIN
  -- Call the procedure
  GetAirportsByAirline('QR', airlineAirports);

  -- Fetch the results from the cursor
  LOOP
    FETCH airlineAirports INTO airportName;
    EXIT WHEN airlineAirports%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE('Airport: ' || airportName);
  END LOOP;

  -- Close the cursor
  CLOSE airlineAirports;
END;
/

--4.Procedure to retrieve details based on Passport Number

CREATE OR REPLACE PROCEDURE GET_PASSENGER_DETAILS
(
  IN_PASSPORTNO IN VARCHAR2,
  OUT_FNAME OUT VARCHAR2,
  OUT_LNAME OUT VARCHAR2,
  OUT_ADDRESS OUT VARCHAR2,
  OUT_PHONE OUT INT,
  OUT_AGE OUT INT,
  OUT_SEX OUT VARCHAR2
)
AS
BEGIN
  SELECT FNAME, LNAME, ADDRESS, PHONE, AGE, SEX
  INTO OUT_FNAME, OUT_LNAME, OUT_ADDRESS, OUT_PHONE, OUT_AGE, OUT_SEX
  FROM PASSENGER2
  WHERE PASSPORTNO = IN_PASSPORTNO;
  
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('Passenger not found.');
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/
--TO call

DECLARE
  v_fname PASSENGER2.FNAME%TYPE;
  v_lname PASSENGER2.LNAME%TYPE;
  v_address PASSENGER2.ADDRESS%TYPE;
  v_phone PASSENGER2.PHONE%TYPE;
  v_age PASSENGER2.AGE%TYPE;
  v_sex PASSENGER2.SEX%TYPE;
BEGIN
  GET_PASSENGER_DETAILS('A1234568', v_fname, v_lname, v_address, v_phone, v_age, v_sex);
  -- Display the retrieved details
  DBMS_OUTPUT.PUT_LINE('First Name: ' || v_fname);
  DBMS_OUTPUT.PUT_LINE('Last Name: ' || v_lname);
  DBMS_OUTPUT.PUT_LINE('Address: ' || v_address);
  DBMS_OUTPUT.PUT_LINE('Phone: ' || v_phone);
  DBMS_OUTPUT.PUT_LINE('Age: ' || v_age);
  DBMS_OUTPUT.PUT_LINE('Sex: ' || v_sex);
END;
/

--5. Employee working from airport name

CREATE OR REPLACE PROCEDURE GET_EMPLOYEE_BY_AIRPORT
(
  p_ap_name IN EMPLOYEE1.AP_NAME%TYPE
)
AS
BEGIN
  FOR emp IN (SELECT SSN, FNAME, LNAME, JOBTYPE, POSITION FROM EMPLOYEE1 WHERE AP_NAME = p_ap_name)
  LOOP
    DBMS_OUTPUT.PUT_LINE('SSN: ' || emp.SSN);
    DBMS_OUTPUT.PUT_LINE('First Name: ' || emp.FNAME);
    DBMS_OUTPUT.PUT_LINE('Last Name: ' || emp.LNAME);
    DBMS_OUTPUT.PUT_LINE('Job Type: ' || emp.JOBTYPE);
    DBMS_OUTPUT.PUT_LINE('Position: ' || emp.POSITION);
    DBMS_OUTPUT.PUT_LINE('----------------------');
  END LOOP;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('No employees found for the specified airport.');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/

--to call
DECLARE
  v_ap_name EMPLOYEE1.AP_NAME%TYPE := 'Louisville International Airport'; -- Specify the desired airport name
BEGIN
  GET_EMPLOYEE_BY_AIRPORT(v_ap_name);
END;
/

--Triggers
--1.If negative price is entered into the fare details

CREATE OR REPLACE TRIGGER TICKET_PRICE_CHECK
BEFORE INSERT ON TICKET2
FOR EACH ROW
BEGIN
  IF :NEW.PRICE < 0 THEN
    RAISE_APPLICATION_ERROR(-20001, 'Invalid price. Price cannot be negative.');
  END IF;
END;
/

--to all
INSERT INTO TICKET2(DATE_OF_BOOKING, SOURCE, DESTINATION, CLASS, PRICE) 
VALUES('01-JAN-22', 'BOM', 'DFW', 'ECONOMY', -500);


--2.Increment is automatically added according to jobtype

CREATE OR REPLACE TRIGGER UPDATEDSalary
BEFORE INSERT OR UPDATE OF SALARY ON EMPLOYEE2
FOR EACH ROW
DECLARE 
  JOBTYPE EMPLOYEE2.JOBTYPE%TYPE;
BEGIN
  JOBTYPE := :NEW.JOBTYPE;

  BEGIN -- Start of Strong Exception Handler
    CASE
      WHEN JOBTYPE = 'Administrative Support' THEN
        :NEW.SALARY := :NEW.SALARY + (:NEW.SALARY * 0.10);
      WHEN JOBTYPE = 'ENGINEER' THEN
        :NEW.SALARY := :NEW.SALARY + (:NEW.SALARY * 0.05);
      WHEN JOBTYPE = 'TRAFFIC MONITOR' THEN
        :NEW.SALARY := :NEW.SALARY + (:NEW.SALARY * 0.25);
      WHEN JOBTYPE = 'AIRPORT AUTHORITY' THEN
        :NEW.SALARY := :NEW.SALARY + (:NEW.SALARY * 0.45);
      ELSE
        -- Raise a strong exception when none of the cases match
        RAISE_APPLICATION_ERROR(-20001, 'Invalid JOBTYPE: ' || JOBTYPE);
    END CASE;
  END; -- End of Strong Exception Handler
END;
/

--to check
--UPDATE EMPLOYEE2
SET SALARY = 6000
WHERE JOBTYPE = 'ENGINEER';

--3.TO check employee Age limit

CREATE OR REPLACE TRIGGER EMPLOYEE1_AGE_LIMIT
BEFORE INSERT OR UPDATE OF AGE ON EMPLOYEE1
FOR EACH ROW
DECLARE
  l_age_limit INTEGER := 18; -- Minimum age limit
  
BEGIN
  IF :NEW.AGE < l_age_limit THEN
    RAISE_APPLICATION_ERROR(-20001, 'Age must be greater than or equal to ' || l_age_limit || '.');
  END IF;
END;
/

--To Call
--INSERT INTO EMPLOYEE1 (AGE) VALUES (13);

--4.To check mobile number is not less than 10 digits

CREATE OR REPLACE TRIGGER EMPLOYEE1_PHONE_FORMAT
BEFORE INSERT OR UPDATE OF PHONE ON EMPLOYEE1
FOR EACH ROW
BEGIN
  IF LENGTH(TO_CHAR(:NEW.PHONE)) <> 10 THEN
    RAISE_APPLICATION_ERROR(-20003, 'Invalid phone number format. Phone number must have 10 digits.');
  END IF;
  


END;
/

--To call
--INSERT INTO EMPLOYEE1 (PHONE) VALUES (1345645);

--5.Seat format is Wrong

CREATE OR REPLACE TRIGGER TICKET1_SEATNO_FORMAT
BEFORE INSERT OR UPDATE OF SEATNO ON TICKET1
FOR EACH ROW
BEGIN
  IF REGEXP_LIKE(:NEW.SEATNO, '[A-Z][0-9]{1,3}') THEN
    -- Valid seat number format (e.g., A10, B234)
    NULL;
  ELSE
    RAISE_APPLICATION_ERROR(-20001, 'Invalid seat number format. Seat number must start with a letter followed by up to 3 digits.');
  END IF;
  
 

END;
/
--TOCALL
--INSERT INTO TICKET1 (SEATNO) VALUES ('AAAAA');

--6.to check ticket cancellation is not early than booking

CREATE OR REPLACE TRIGGER TICKET1_VALIDATE_CANCELLATION_DATE
BEFORE UPDATE OF DATE_OF_CANCELLATION ON TICKET1
FOR EACH ROW
BEGIN
  IF :NEW.DATE_OF_CANCELLATION IS NOT NULL THEN
    IF :NEW.DATE_OF_CANCELLATION < :NEW.DATE_OF_BOOKING THEN
      RAISE_APPLICATION_ERROR(-20003, 'Invalid cancellation date. Cancellation date cannot be earlier than the booking date.');
    END IF;
  END IF;
  


END;
/

--to call
--Update ticket1 set date_of_cancellation = '09-JUN-2015' WHERE date_of_booking = '11-JUN-2023';


